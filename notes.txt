The conversion process is deterministic; I saw no reason that it
should not be, but confirmed it by writing the output to a set of
files and comparing them over several runs.

The process of transforming a PCM data file for transmission is not
deterministic under my code with a static AES key and iv.  I believe
that is not correct.


raop_play_send_audio.c:329 pcm_get_ Starting bit dump

_audio.c:335 pcm_get_ bp: 00000000 00010010 00000000 00100000
_audio.c:335 pcm_get_ bp: 00000000 00010100 00000000 00000010
_audio.c:335 pcm_get_ bp: 00000000 00011010 00000000 00000011
_audio.c:335 pcm_get_ bp: 00000000 00011000 00000000 00000000
_audio.c:335 pcm_get_ bp: 00000000 00011000 11111111 11111111
_audio.c:335 pcm_get_ bp: 00000000 00010111 00000000 00000000
_audio.c:335 pcm_get_ bp: 00000000 00010101 00000000 00000000
_audio.c:335 pcm_get_ bp: 00000000 00011000 00000000 00000001


raop_play_send_audio.c:329 pcm_get_ Starting bit dump
_audio.c:335 pcm_get_ bp: 00000000 00000010 00000000 00100000
_audio.c:335 pcm_get_ bp: 00000000 00000100 00000000 00100100
_audio.c:335 pcm_get_ bp: 00000000 00000110 00000000 00101000
_audio.c:335 pcm_get_ bp: 00000000 00000000 00000000 00110100
_audio.c:335 pcm_get_ bp: 00000000 11111110 11111111 00110001
_audio.c:335 pcm_get_ bp: 00000000 00000000 00000000 00110000
_audio.c:335 pcm_get_ bp: 00000000 00000000 00000000 00101110
_audio.c:335 pcm_get_ bp: 00000000 00000010 00000000 00101010


./faac -P -X ../../audio_samples/sndtest.raw

I believe the audio data is stored as integers.

The PCM parameters for the raw audio are as follows:

[dallan@merry audio_samples]$ play -L -s -2 -c2 -r 44100 -v .5
sndtest.raw

Input File     : 'sndtest.raw'
Sample Size    : 16-bit (2 bytes)
Sample Encoding: signed (2's complement)
Channels       : 2
Sample Rate    : 44100
Level adjust   : 0.5 (linear gain)

Time: 00:13.75 [00:00.00] of 00:00.00 (  0.0%) Output Buffer: 606.21K

Done.
[dallan@merry audio_samples]$ 




TODO

Implement tracing into a buffer and make it thread safe.  If you can't
get a buffer slot, then figure you're probably about dead anyway, and
just log the message and a message saying there is no trace buffer
slot.

See how the kernel implements atomic_t and see if it can be used, as
IIRC there's no atomic_t in pthreads.

autoconf

save & restore mask sets

Use the Mozilla project NSS for encryption and encoding.

(gdb) bt
#0  rsa_FormatOneBlock (modulusLen=256, blockType=RSA_BlockPublic,
data=0xbf956d94)
    at rsawrapr.c:199
#1  0x00383cd2 in rsa_FormatBlock (result=0xbf956da0, modulusLen=256,
blockType=RSA_BlockPublic, 
    data=0xbf956d94) at rsawrapr.c:423
#2  0x0038428d in RSA_EncryptBlock (key=0x83a7730, output=0x83a6428
"", output_len=0xbf956e08, 
    max_output_len=256, input=0x83a5580 "�N�r%�t0�P\030\222\204",
    input_len=16) at rsawrapr.c:646
#3  0x0037582e in NSC_Encrypt (hSession=16777219, pData=0x83a5580
"�N�r%�t0�P\030\222\204", 
    ulDataLen=16, pEncryptedData=0x83a6428 "",
    pulEncryptedDataLen=0xbf956ef8) at pkcs11c.c:946
#4  0x0037c460 in NSC_WrapKey (hSession=16777219,
pMechanism=0xbf956eec, hWrappingKey=2, hKey=1, 
    pWrappedKey=0x83a6428 "", pulWrappedKeyLen=0xbf956ef8) at
    pkcs11c.c:4252
#5  0x00191be5 in PK11_PubWrapSymKey (type=9, pubKey=0x83a51f0,
symKey=0x83a52d0, 
    wrappedKey=0xbf957188) at pk11skey.c:1173
#6  0x0804d24a in wrap_aes_key (aes_data=0xbf95704c,
rsa_data=0xbf957374) at encryption.c:181
#7  0x080510e3 in init_rtsp_session (session=0xbf956fe8,
client=0xbf9573a8, server=0xbf9572f0)
    at rtsp.c:542
#8  0x08052524 in rtsp_start_client () at rtsp_client.c:252
#9  0x0804944f in main () at main.c:41
(gdb)
